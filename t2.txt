Unit 2
package Main;
public class Characters {

    public static void main(String[] args) {

        System.out.println("Hello\tworld");
        System.out.println("Hello\bworld");
        System.out.println("Hello\nworld");
        System.out.println("Hello\rworld");
        System.out.println("Hello\fworld");
        System.out.println("Hello\'world");
        System.out.println("Hello\"world");
        System.out.println("Hello\\world");

        System.out.println("isLetter('A'):     " + Character.isLetter('A'));
        System.out.println("isDigit('5'):      " + Character.isDigit('5'));
        System.out.println("isDigit('5'):      " + Character.isLetterOrDigit('5'));
        System.out.println("isDigit('5'):      " + Character.isAlphabetic('5'));

        System.out.println("isUpperCase('A'):  " + Character.isUpperCase('A'));
        System.out.println("isLowerCase('a'):  " + Character.isLowerCase('a'));
        
        System.out.println("toUpperCase('a'):  " + Character.toUpperCase('a'));
        System.out.println("toLowerCase('A'):  " + Character.toLowerCase('A'));
        System.out.println("toString('A'):     " + Character.toString(5));
    }
}

// Escape Sequence Description
// \t Inserts a tab in the text at this point.
// \b Inserts a backspace in the text at this point.
// \n Inserts a newline in the text at this point.
// \r Inserts a carriage return in the text at this point.
// \f Inserts a form feed in the text at this point.
// \' Inserts a single quote character in the text at this point.
// \" Inserts a double quote character in the text at this point.
// \\ Inserts a backslash character in the text at this point.

package Main;
public class Strings {
    public static void main(String[] args) {
        String a = "Sujal";
        a.length(); // Output: 5
        a.charAt(0); // Output: S
        a.equals("Sujal"); // Output: true
        a.equalsIgnoreCase(a); // Output: true
        
        a.toLowerCase(); // Output: sujal
        a.toString(); // Output: Sujal
        a.toUpperCase(); // Output: SUJAL
        a.trim(); // Output: Sujal
        String.valueOf("98"); // Output: 98

        a.substring(0); // Output: Sujal
        a.substring(0, 2); // Output: Su
        
        a.indexOf("jal"); // Output: 2
        a.lastIndexOf(a); // Output: 0
        
        a.replace("l", a); // Output: Sujal
        a.replaceAll("j", a); // Output: SuSujalal
        a.replaceFirst("S", "J"); // Output: Jujal
        
        a.split("u"); // Output: [S, jal]
        a.split("u", 2); // Output: [S, jal]
        
        a.endsWith("l"); // Output: true
        a.startsWith("S"); // Output: true
        a.subSequence(0, 2); // Output: Su

        a.toCharArray(); // Output: [S, u, j, a, l]


        String x = "hello";
        x += "hi";
        System.out.println(x);
    }
}

// charAt(int index): Returns the character at the specified index.
// endsWith(String suffix): Tests if this string ends with the specified suffix.
// equals(Object anObject): Compares this string to the specified object.
// equalsIgnoreCase(String anotherString): Compares this String to another
// String, ignoring case considerations.

// indexOf(int ch): Returns the index within this string of the first occurrence
// of the specified character.
// indexOf(int ch, int fromIndex): Returns the index within this string of the
// first occurrence of the specified character, starting the search at the
// specified index.
// indexOf(String str): Returns the index within this string of the first
// occurrence of the specified substring.
// indexOf(String str, int fromIndex): Returns the index within this string of
// the first occurrence of the specified substring, starting at the specified
// index.

// lastIndexOf(int ch): Returns the index within this string of the last
// occurrence of the specified character.
// lastIndexOf(int ch, int fromIndex): Returns the index within this string of
// the last occurrence of the specified character, searching backward starting
// at the specified index.
// lastIndexOf(String str): Returns the index within this string of the
// rightmost occurrence of the specified substring.
// lastIndexOf(String str, int fromIndex): Returns the index within this string
// of the last occurrence of the specified substring, searching backward
// starting at the specified index.

// length(): Returns the length of this string.
// replace(char oldChar, char newChar): Returns a new string resulting from
// replacing all occurrences of oldChar in this string with newChar.
// replaceAll(String regex, String replacement): Replaces each substring of this
// string that matches the given regular expression with the given replacement.
// replaceFirst(String regex, String replacement): Replaces the first substring
// of this string that matches the given regular expression with the given
// replacement.

// split(String regex): Splits this string around matches of the given regular
// expression.
// split(String regex, int limit): Splits this string around matches of the
// given regular expression.

// startsWith(String prefix): Tests if this string starts with the specified
// prefix.
// startsWith(String prefix, int toffset): Tests if this string starts with the
// specified prefix beginning at the specified index.

// subSequence(int beginIndex, int endIndex): Returns a new character sequence
// that is a subsequence of this sequence.
// substring(int beginIndex): Returns a new string that is a substring of this
// string.
// substring(int beginIndex, int endIndex): Returns a new string that is a
// substring of this string.

// toCharArray(): Converts this string to a new character array.
// toLowerCase(): Converts all of the characters in this String to lower case
// using the rules of the default locale.
// toLowerCase(Locale locale): Converts all of the characters in this String to
// lower case using the rules of the given Locale.
// toString(): This object (which is already a string!) is itself returned.
// toUpperCase(): Converts all of the characters in this String to upper case
// using the rules of the default locale.
// toUpperCase(Locale locale): Converts all of the characters in this String to
// upper case using the rules of the given Locale.
// trim(): Returns a copy of the string, with leading and trailing whitespace
// omitted.
// valueOf(primitive data type x): Returns the string representation of the
// passed data type argument.

package q10946;
import java.util.*;
public class MultiDimArrayPrinter {
	public static void main(String[] args) {
		int[][] int2DArr = {
							{1},
							{2, 3},
							{4, 5, 6},
							{7, 8, 9, 10}
						};
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();

		for (int[] v : int2DArr){
			for (int i : v){
				if(i < n){
					System.out.print(i + " ");
				}
			}
		}
	}
}
package q10947;
import java.util.*;
public class MultiDimArrayPrinter {
	public static void main(String[] args) {
		int[][] int2DArr = {
							{1},
							{2, 3},
							{4, 5, 6},
							{7, 8, 9, 10}
						};
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();

		for (int i = 0 ; i < n ; i ++ ){
			for(int j : int2DArr[i]){
				System.out.print(j + " ");
			}
			System.out.println("");
		}
	}
}
public class MountainNamePrinter{

	public static void main(String[] args){

		String[] a = {"Nanda Devi", "Kamet" , "K12", "Dunagiri"};

		for(String s : a){
			System.out.println(s);
		}
	}
} 
public class ArrayElementCounter{

	public static int countElement(int[] arr, int e){

		int c = 0;
		for(int i : arr){
			if(i == e)
				c++;
		}
		return c;
	}
}
public class ArrayReverser {
	public int[] reverseArray(int[] arr) {
		int[] a = new int[arr.length];

		for(int i = 0 ; i <arr.length;i++){
			a[arr.length - 1 - i] = arr[i];
		}
		return a;

	}
}

import java.util.*;

public class BubbleSorting{

	public static void bubbleSort(int[] a){
		int n = a.length;
		for(int i = 0 ; i < n - 1;i++){
			boolean flag = false;
			
			for(int j = 0; j < n - i - 1;j++){
				if(a[j] > a[j+1]){
					flag = true;
					int t = a[j];
					a[j] = a[j+1];
					a[j+1] = t;
				}
			}
			if(!flag){
				break;
			}
		}

		for(int i : a){
			System.out.println(i);
		}
	}
}


import java.util.*;
public class InsertionSorting{

	public static void insertionSort(int[] a){
		Arrays.sort(a);
		// int n = a.length;

		// for(int i = 1; i < n; i++){
		// 	int key = a[i];
		// 	int j = i -1 ;

		// 	while(j>=0 && a[j] > key){
		// 		a[j+1] = a[j];
		// 		j--;
		// 	}
		// 	a[j+1] = key;
		// }
		
		
		
		for(int i : a){
			System.out.println(i);
		}
	}
}


public class SelectionSortingLargestElement{

	public static void selectionSortLargestEle(int[] a){
		int n = a.length;
		for(int i = 0 ;i<n-1;i++){

			int min = i;
			for(int j = i+1;j<n;j++){
				if(a[j] < a[min]){
					min = j;
				}
			}

			if(min!=i){
				int t = a[min];
				a[min] = a[i];
				a[i] = t;
			}
		}


		for(int i : a){
			System.out.println(i);
		}
	}
}

import java.util.Scanner;
public class MyMergeSort {
	private int[] array;
	private int[] tempMergArr;
	private int length;
	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		System.out.print("Enter no of elements in the array: ");
		int n = s.nextInt();
		int[] inputArr = new int[n];
		System.out.print("Enter elements in the array seperated by space: ");
		for(int i = 0; i < n; i++) {
			inputArr[i] = s.nextInt();
		}
		MyMergeSort mms = new MyMergeSort();
		mms.sort(inputArr);
		for(int i:inputArr){
			System.out.print(i);
			System.out.print(" ");
		}
	}
	public void sort(int inputArr[]) {
		this.array = inputArr;
		this.length = inputArr.length;
		this.tempMergArr = new int[length];
		doMergeSort(0, length - 1);
	}
	private void doMergeSort(int l, int h) {
		if(l<h){
			int m = l + (h - l)/2;
			doMergeSort(l , m);
			doMergeSort(m + 1, h);
			mergeParts(l, m, h);
		}
	}
	private void mergeParts(int l, int m, int h) {
		for(int i = l ;i<=h ;i++){
			tempMergArr[i] = array[i];
		}

		int i = l;
		int j = m + 1;
		int k = l;

		while(i<=m && j<= h){
			if(tempMergArr[i] <= tempMergArr[j])
				array[k] = tempMergArr[i++];
			else
				array[k] = tempMergArr[j++];
			k++;
		}

		while(i <= m){
			array[k] = tempMergArr[i];
			k++;
			i++;
		}
	}
}


import java.util.*;
public class BinarySearch{

	public static void binarySearch(int[] a, int k){
		Arrays.sort(a);
		int l = 0, r = a.length;
		int i = 0;
		while(l <= r){
			int mid = l + (r - l)/2;

			if(a[mid] == k){
				i = mid;
				break;
			}
			else if(a[mid] < k)
				l = mid + 1;
			else 
				r = mid - 1;
		}
		if(i == 0)
			System.out.println("Search element " + k + " is not found");
		else
			System.out.println("Search element " + k + " is found at position : " + i);
	}
}


public class SumOfElements {
	
	/**
	 * Computes the sum of all the elements in the given array
	 * 
	 * 
	 * @return the sum 
	 */
	public long sum(int[] arr) {
		long sum = 0;
		for(long i: arr )
			sum += i;
		return sum;
	}
}


public class ElementCount {
	public static void main(String[] args) {
		int[] arr = {1, 12, 9, 3, 5, 3, 78, 4, 3, 9, 18, 56, 1, 5};
		
		int e = Integer.parseInt(args[0]);

		java.util.ArrayList<Integer> a = new java.util.ArrayList<>();
		for(int i : arr)
			a.add(i);
		int count = java.util.Collections.frequency(a,e);
		System.out.println(count);
		
		
	}
}


import java.util.*;
public class FindDuplicate {
	/**
	 * Find the arg element occures in the arr more than once
	 * 
	 * 
	 * @return result
	 */ 
	
	public boolean findDuplicate(int[] arr, int arg) {
		//Write your code here

		ArrayList<Integer> a = new ArrayList<>();
		for (int i : arr)
			a.add(i);
		
		int f = Collections.frequency(a,arg);

		return f > 1;
	}
}


import java.util.*;
public class FindCenteredAverage{

	public static int findCenteredAverage(int[] a){

		int h = Integer.MIN_VALUE;
		int l = Integer.MAX_VALUE;
		int sum = 0;
		for(int i : a){
			h = Math.max(h, i);
			l = Math.min(l, i);
			sum += i;
		}
		sum -= h;
		sum -= l;

		return sum /(a.length - 2);
		
	}
}


public class SymmetricalArrayCheck {

	
	public boolean checkSymmetry(int[] arr, int n) {
		//Write your code here

		int s = 0, e = arr.length - n;
		for(int i = 0 ; i < n ;i++){
			if(arr[s++] != arr[e++])
				return false;
		}
		return true;
	}
}

public class Box {
	
	// Declare variables
	private float l, b, h;
	
	public Box(float l, float b, float h) {
		this.l = l;
		this.b = b;
		this.h = h;
	}
	public float volume() {
		return (l*b*h);
	}
	public int compare(Box b) {
		if (volume() > b.volume())
			return 1;
		else if (volume() == b.volume())
			return 0;
		return 5;
		
	}
	public static void main(String args[]) {
		int flag;
		Box box1 = new Box(Float.parseFloat(args[0]), Float.parseFloat(args[1]), Float.parseFloat(args[2]));
		Box box2 = new Box(Float.parseFloat(args[3]), Float.parseFloat(args[4]), Float.parseFloat(args[5]));
		flag = box1.compare(box2);
		if (flag == 1)
			System.out.println("box1 is larger than box2");
		else if (flag == 0)
			System.out.println("box1 is same size as box2");
		else
			System.out.println("box1 is smaller than box2");
	}
}

public class Example1 {
	public static void main(String[] args) {
		Date currentDate = new Date();
		System.out.println(currentDate);
	}
}
import java.util.Date;

public class Example2 {
	public static void main(String[] args) {
		Date currentDate = new Date();
		System.out.println(currentDate);
	}
}
public class Example3 {
	public static void main(String[] args) {
		java.util.Date currentDate = new java.util.Date();
		System.out.println(currentDate);
	}
}

class A {
	private int x;
	public int y;
	public void sayHello() {
		System.out.println("Hello");
	}
	private void sayBye() {
		System.out.println("Hello");
	}
}
class B {
	public static void main(String[] args) {
		A a1 = new A();
		System.out.println(a1.x); // Statement 1
		System.out.println(a1.y); // Statement 2
		System.out.println(a1.sayHello());  // Statement 3
		System.out.println(a1.sayBye()); // Statement 4
	}
}

public class StringLiterals {
	//Write your code here...
	public static void main(String[] args){
		String a = "Himalayas";
		String b = "are beautiful.";
		String c = " ";
		String d = "";

		System.out.println(a + c + b);
	}
}


public class StringLiterals {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in); 
		String str1=sc.nextLine();  

//Write your code here....
		String str2 = new String(str1);


		System.out.print("str1 == str2 : ");
		System.out.println(str1 == str2);

		
		System.out.println("str1.equals(str2) : " + str1.equals(str2));
		
	
	
	}
}

import java.util.*;
public class StringMethods {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		String str = sc.nextLine();
	//Write your code here...
		System.out.println("Length : " + str.length());
		System.out.println("2nd character : " + str.charAt(1));
		System.out.println("Upper case : " + str.toUpperCase());
		System.out.println("Lower case : " + str.toLowerCase());
		
	}
}

import java.util.*;
public class StringMethods {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		String str1 = sc.nextLine();
		String str2 = sc.nextLine();
		//Write your code here....

		System.out.println("equals : " + str1.equals(str2));
		System.out.println("equalsIgnoreCase: " + str1.equalsIgnoreCase(str2));
		System.out.println("startsWith " + str1.startsWith("J"));
		System.out.println("endsWith " + str2.endsWith("is"));
		
	}
}


public class StringMethods {
	public static void main(String[] args) {
		String str = "special char &";
		System.out.println(str.indexOf("char"));
		System.out.println(str.indexOf(" "));
		System.out.println(str.lastIndexOf(" "));
		System.out.println(str.lastIndexOf("a",8));
		System.out.println(str.indexOf("sp",4));
		
	}
}

import java.util.*;
public class SubString {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		String str = sc.nextLine();
		String substr = sc.nextLine();
		int index = sc.nextInt();
		System.out.println(str.substring(index));
		int a = str.indexOf(substr);
		System.out.println(str.substring(a));
	}
}

package q11179;
public class StringMethods {
	public static void main(String[] args) {
		String str = " Six seasons   ";
		System.out.println("length = " + str.length());
		System.out.println("length after trim = " + str.trim().length());
		System.out.println(str.replace(" ","*"));
		System.out.println(str.replace("Six","Four").trim());
		
	}
}

public class PalindromeOrNot{

	public static boolean is(String a){
		String rev = new StringBuilder(a).reverse().toString();
		return (a.equals(rev));
	}
	
	public static void main(String[] args){
		System.out.println("The given string " + args[0] + (is(args[0]) ? " is " : " is not ") + "a palindrome");
	}
	
}

package q11186;
public class StringFormatting {
	public static void main(String[] args) {
		// int iVar = 2435;
		int a = 2435;
		//write your code here...
		System.out.printf("%6d%n",a);
		System.out.printf("%06d%n",a);
		System.out.printf("%+06d%n",a);
		System.out.printf("%+,d%n",a);
		System.out.printf("%,d \n",a);
		
	}
}

public class StringFormatting {
	public static void main(String[] args) {
		float dVar = 3.141f;
		
		//write your code here..
		System.out.printf("%f%n",dVar);
		System.out.printf("%.3f%n",dVar);
		System.out.printf("%.2f%n",dVar);
		System.out.printf("%08.4f%n",dVar);
		System.out.printf("%+08.4f%n",dVar);
	}
}
public class CheckChars{


	public static void main(String[] args){
		String s = args[0];
		System.out.println(s.contains("w") && s.contains("e") && s.contains("b"));
	}
}

public class JavaStringBufferDelete{

	public static void main(String[] args){

		StringBuffer a = new StringBuffer("Hello India"); 
		StringBuffer b = new StringBuffer("Hello World"); 
		StringBuffer c = new StringBuffer("Hello Java"); 

		System.out.println(a.delete(0,6));
		System.out.println(b.delete(0,b.length()));
		System.out.println(c.delete(0,1));
	}
}

import java.util.*;
public class StringBuilderDemo {
	public static void main(String[] args) {
		//Create a StringBuilder object and initialize it with the string "Ganga".
		Scanner sc = new Scanner(System.in);
		String str = sc.nextLine();
		/*Append the user-provided string to the StringBuilder object and Print it.
		Delete the first two characters from the StringBuilder object and Print it.*/

		StringBuilder s = new StringBuilder("Ganga");
		s.append(str);
		System.out.println(s);
		s.delete(0,2);
		System.out.println(s);
		
	}
}
public class Main {
          public static void main(String args[]) {
              StringBuilder sb = new StringBuilder("Hi! Good Morning.");
              System.out.println(sb.length());
          }
}

public class Example{
	
	public static void main(String[] args){
		StringBuilder s = new StringBuilder();
		char[] arr = args[0].toCharArray();
		for (char c : arr){
			if(c >= 'A' && c <= 'Z')
				s.append(c);
		}
		System.out.println("The result is: "+s.toString());
	}
}


public class StringBuilderDemo {
	public static void main(String args[]) {
		String s1 = new String("ABC");
		String s2 = new String("ABC");
		System.out.println(s1.equals(s2));
		StringBuilder sb1 = new StringBuilder("ABC");
		StringBuilder sb2 = new StringBuilder("ABC");
		System.out.println(sb1.equals(sb2));
	}
}
public class Test {
	public static void main(String args[]) {
		
		// Iterate over the elements in enum and print them
		for(Languages l : Languages.values()){
			System.out.println(l);
		}
	}
}
enum Languages {
	JAVA,
	PYTHON,
	C,
	CPP,
	DBMS
}

class MathExamples{
//Define the main method
	public static void main(String[] args){
		Scanner sc = new Scanner(System.in);
		double base = sc.nextDouble();
		/*Read the exponenet input from the user as base
		using nextDouble method*/
		double ex = sc.nextDouble();
		/*calculate the result of raising
		base to the power of exponent using 
		Math.pow(base,exponent)*/
		double res = Math.pow(base, ex);
		/*calculate the square root 
		of the base value using
		Math.sqrt(base)*/
		double sq = Math.sqrt(base);

		System.out.println(base + " to the power " + ex + " is : " + res);
		System.out.println("Square root of " + base + " is : " + sq);
	}
}
